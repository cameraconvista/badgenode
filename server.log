
> rest-express@1.0.0 dev
> NODE_ENV=development tsx server/start.ts

[dotenv@17.2.3] injecting env (4) from .env.local -- tip: üóÇÔ∏è backup and recover secrets: https://dotenvx.com/ops
[dotenv@17.2.3] injecting env (0) from .env -- tip: ‚öôÔ∏è  override existing env vars with { override: true }
[ENV Bootstrap] Validazione variabili critiche:
  SUPABASE_URL: ‚úÖ
  SUPABASE_SERVICE_ROLE_KEY: ‚úÖ
‚úÖ [ENV Bootstrap] Completato
‚úÖ [Supabase Admin] Singleton inizializzato
Tue, 21 Oct 2025 21:28:18 GMT express:router:route new '/api/health'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/api/health'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route get '/api/health'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route new '/api/health/admin'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/api/health/admin'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route get '/api/health/admin'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route new '/api/debug/env'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/api/debug/env'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route get '/api/debug/env'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route new '/api/health/deep'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/api/health/deep'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route get '/api/health/deep'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route new '/api/ready'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/api/ready'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route get '/api/ready'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route new '/api/version'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/api/version'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route get '/api/version'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route new '/api/utenti'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/api/utenti'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route get '/api/utenti'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route new '/api/utenti/pin/:pin'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/api/utenti/pin/:pin'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route get '/api/utenti/pin/:pin'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route new '/api/utenti'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/api/utenti'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route post '/api/utenti'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route new '/api/pin/validate'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/api/pin/validate'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route get '/api/pin/validate'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route new '/api/ex-dipendenti'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/api/ex-dipendenti'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route get '/api/ex-dipendenti'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route new '/api/storico'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/api/storico'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route get '/api/storico'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route new '/api/utenti/test-permissions'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/api/utenti/test-permissions'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route get '/api/utenti/test-permissions'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route new '/api/utenti/:pin'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/api/utenti/:pin'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route delete '/api/utenti/:pin'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route new '/manual'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/manual'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route post '/manual'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route post '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route new '/day'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/day'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route delete '/day'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route new '/:id'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/:id'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route patch '/:id'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router use '/' router
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router use '/' router
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router use '/' router
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router use '/' router
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route new '/health'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/health'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route get '/health'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route new '/ready'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/ready'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route get '/ready'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route new '/version'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/version'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route get '/version'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:application set "x-powered-by" to true
Tue, 21 Oct 2025 21:28:18 GMT express:application set "etag" to 'weak'
Tue, 21 Oct 2025 21:28:18 GMT express:application set "etag fn" to [Function: generateETag]
Tue, 21 Oct 2025 21:28:18 GMT express:application set "env" to 'development'
Tue, 21 Oct 2025 21:28:18 GMT express:application set "query parser" to 'extended'
Tue, 21 Oct 2025 21:28:18 GMT express:application set "query parser fn" to [Function: parseExtendedQueryString]
Tue, 21 Oct 2025 21:28:18 GMT express:application set "subdomain offset" to 2
Tue, 21 Oct 2025 21:28:18 GMT express:application set "trust proxy" to false
Tue, 21 Oct 2025 21:28:18 GMT express:application set "trust proxy fn" to [Function: trustNone]
Tue, 21 Oct 2025 21:28:18 GMT express:application booting in development mode
Tue, 21 Oct 2025 21:28:18 GMT express:application set "view" to [Function: View]
Tue, 21 Oct 2025 21:28:18 GMT express:application set "views" to '/Users/dero/Documents/badgenode_main/views'
Tue, 21 Oct 2025 21:28:18 GMT express:application set "jsonp callback name" to 'callback'
Tue, 21 Oct 2025 21:28:18 GMT express:router use '/' query
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router use '/' expressInit
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router use '/' jsonParser
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router use '/' urlencodedParser
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router use '/' requestIdMiddleware
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router use '/' readOnlyGuard
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router use '/' <anonymous>
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router use '/' <anonymous>
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router use '/' <anonymous>
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router use '/api' router
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/api'
Tue, 21 Oct 2025 21:28:18 GMT express:router use '/api' router
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/api'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route new '/api/ready'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/api/ready'
Tue, 21 Oct 2025 21:28:18 GMT express:router:route get '/api/ready'
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router use '/' router
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router use '/' router
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router use '/' router
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router use '/api/timbrature' router
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/api/timbrature'
[ROUTES] /api mounted
Tue, 21 Oct 2025 21:28:18 GMT express:router use '/' <anonymous>
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
2025-10-21T21:28:18.911Z vite:config config file loaded in 76.14ms
2025-10-21T21:28:18.911Z vite:env loading env files: [
  '/Users/dero/Documents/badgenode_main/.env',
  '/Users/dero/Documents/badgenode_main/.env.local',
  '/Users/dero/Documents/badgenode_main/.env.development',
  '/Users/dero/Documents/badgenode_main/.env.development.local'
]
2025-10-21T21:28:18.912Z vite:env env files loaded in 0.27ms
2025-10-21T21:28:18.912Z vite:env using resolved env: {
  VITE_SUPABASE_URL: 'https://tutllgsjrbxkmrwseogz.supabase.co',
  VITE_SUPABASE_ANON_KEY: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InR1dGxsZ3NqcmJ4a21yd3Nlb2d6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAyMTU4MTQsImV4cCI6MjA3NTc5MTgxNH0.TnHXfwBI-KRaill9EIxreEXUyyDV1_RDLBmeDrJWfcY',
  SUPABASE_SERVICE_ROLE_KEY: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InR1dGxsZ3NqcmJ4a21yd3Nlb2d6Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc2MDIxNTgxNCwiZXhwIjoyMDc1NzkxODE0fQ.uA4YB955SdeNQ8SagprHaciWtFqfithLauVpORGwUvE',
  DATABASE_URL: 'postgresql://postgres.tutllgsjrbxkmrwseogz:Jazzclub-00!@aws-1-eu-central-1.pooler.supabase.com:6543/postgres',
  NODE_ENV: 'development',
  TERM_PROGRAM: 'vscode',
  NODE: '/usr/local/bin/node',
  INIT_CWD: '/Users/dero/Documents/badgenode_main',
  TERM: 'xterm-256color',
  SHELL: '/bin/zsh',
  HOMEBREW_REPOSITORY: '/opt/homebrew',
  TMPDIR: '/var/folders/3p/x0p7b06d6fs7wbnhkjpzcv_00000gn/T/',
  npm_config_global_prefix: '/usr/local',
  TERM_PROGRAM_VERSION: '1.100.3',
  ZDOTDIR: '/Users/dero',
  ORIGINAL_XDG_CURRENT_DESKTOP: 'undefined',
  MallocNanoZone: '0',
  COLOR: '0',
  npm_config_noproxy: '',
  npm_config_local_prefix: '/Users/dero/Documents/badgenode_main',
  USER: 'dero',
  VSCODE_LOGIN_INITIALIZED: '1',
  COMMAND_MODE: 'unix2003',
  npm_config_globalconfig: '/usr/local/etc/npmrc',
  SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.SeuCikkHBa/Listeners',
  VSCODE_PROFILE_INITIALIZED: '1',
  __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x4',
  npm_execpath: '/usr/local/lib/node_modules/npm/bin/npm-cli.js',
  PAGER: 'cat',
  PATH: '/Users/dero/Documents/badgenode_main/node_modules/.bin:/Users/dero/Documents/node_modules/.bin:/Users/dero/node_modules/.bin:/Users/node_modules/.bin:/node_modules/.bin:/usr/local/lib/node_modules/npm/node_modules/@npmcli/run-script/lib/node-gyp-bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin',
  npm_package_json: '/Users/dero/Documents/badgenode_main/package.json',
  _: '/Users/dero/Documents/badgenode_main/node_modules/.bin/tsx',
  npm_config_userconfig: '/Users/dero/.npmrc',
  npm_config_init_module: '/Users/dero/.npm-init.js',
  USER_ZDOTDIR: '/Users/dero',
  __CFBundleIdentifier: 'com.exafunction.windsurf',
  npm_command: 'run-script',
  PWD: '/Users/dero/Documents/badgenode_main',
  npm_lifecycle_event: 'dev',
  EDITOR: 'vi',
  npm_package_name: 'rest-express',
  LANG: 'C.UTF-8',
  npm_config_npm_version: '10.9.2',
  VSCODE_GIT_ASKPASS_EXTRA_ARGS: '',
  XPC_FLAGS: '0x0',
  npm_config_node_gyp: '/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js',
  npm_package_version: '1.0.0',
  XPC_SERVICE_NAME: '0',
  VSCODE_INJECTION: '1',
  SHLVL: '2',
  HOME: '/Users/dero',
  VSCODE_GIT_ASKPASS_MAIN: '/Applications/Windsurf.app/Contents/Resources/app/extensions/git/dist/askpass-main.js',
  HOMEBREW_PREFIX: '/opt/homebrew',
  npm_config_cache: '/Users/dero/.npm',
  LOGNAME: 'dero',
  npm_lifecycle_script: 'NODE_ENV=development tsx server/start.ts',
  VSCODE_GIT_IPC_HANDLE: '/var/folders/3p/x0p7b06d6fs7wbnhkjpzcv_00000gn/T/vscode-git-c98e29a417.sock',
  npm_config_user_agent: 'npm/10.9.2 node/v22.17.1 darwin arm64 workspaces/false',
  VSCODE_GIT_ASKPASS_NODE: '/Applications/Windsurf.app/Contents/Frameworks/Windsurf Helper (Plugin).app/Contents/MacOS/Windsurf Helper (Plugin)',
  GIT_ASKPASS: '/Applications/Windsurf.app/Contents/Resources/app/extensions/git/dist/askpass.sh',
  INFOPATH: '/opt/homebrew/share/info:/opt/homebrew/share/info:',
  HOMEBREW_CELLAR: '/opt/homebrew/Cellar',
  OSLogRateLimit: '64',
  GIT_PAGER: 'cat',
  DEBUG: '*',
  npm_node_execpath: '/usr/local/bin/node',
  npm_config_prefix: '/usr/local',
  COLORTERM: 'truecolor'
}
2025-10-21T21:28:18.913Z unplugin-icons:options compiler jsx
2025-10-21T21:28:18.914Z vite:env loading env files: [
  '/Users/dero/Documents/badgenode_main/client/.env',
  '/Users/dero/Documents/badgenode_main/client/.env.local',
  '/Users/dero/Documents/badgenode_main/client/.env.development',
  '/Users/dero/Documents/badgenode_main/client/.env.development.local'
]
2025-10-21T21:28:18.914Z vite:env env files loaded in 0.06ms
2025-10-21T21:28:18.914Z vite:env using resolved env: {
  VITE_SUPABASE_URL: 'https://tutllgsjrbxkmrwseogz.supabase.co',
  VITE_SUPABASE_ANON_KEY: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InR1dGxsZ3NqcmJ4a21yd3Nlb2d6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAyMTU4MTQsImV4cCI6MjA3NTc5MTgxNH0.TnHXfwBI-KRaill9EIxreEXUyyDV1_RDLBmeDrJWfcY'
}
2025-10-21T21:28:18.922Z vite:config using resolved config: {
  plugins: [
    'vite:optimized-deps',
    'vite:watch-package-data',
    'vite:pre-alias',
    'alias',
    'vite:react-babel',
    'vite:react-refresh',
    'unplugin-icons',
    'vite-plugin-pwa',
    'vite:modulepreload-polyfill',
    'vite:resolve',
    'vite:html-inline-proxy',
    'vite:css',
    'vite:esbuild',
    'vite:json',
    'vite:wasm-helper',
    'vite:worker',
    'vite:asset',
    'vite-plugin-pwa:dev-sw',
    'vite:wasm-fallback',
    'vite:define',
    'vite:css-post',
    'vite:worker-import-meta-url',
    'vite:asset-import-meta-url',
    'vite:dynamic-import-vars',
    'vite:import-glob',
    'vite-plugin-pwa:info',
    'vite-plugin-pwa:pwa-assets',
    'vite:client-inject',
    'vite:css-analysis',
    'vite:import-analysis'
  ],
  resolve: {
    externalConditions: [ 'node', 'module-sync' ],
    extensions: [
      '.mjs',  '.js',
      '.mts',  '.ts',
      '.jsx',  '.tsx',
      '.json'
    ],
    dedupe: [ 'react', 'react-dom' ],
    noExternal: [],
    external: [],
    preserveSymlinks: false,
    alias: [
      {
        find: '@',
        replacement: '/Users/dero/Documents/badgenode_main/client/src'
      },
      {
        find: '@shared',
        replacement: '/Users/dero/Documents/badgenode_main/server/shared'
      },
      {
        find: /^\/?@vite\/env/,
        replacement: '/@fs/Users/dero/Documents/badgenode_main/node_modules/vite/dist/client/env.mjs'
      },
      {
        find: /^\/?@vite\/client/,
        replacement: '/@fs/Users/dero/Documents/badgenode_main/node_modules/vite/dist/client/client.mjs'
      }
    ],
    mainFields: [ 'browser', 'module', 'jsnext:main', 'jsnext' ],
    conditions: [ 'module', 'browser', 'development|production' ],
    builtins: []
  },
  root: '/Users/dero/Documents/badgenode_main/client',
  base: '/',
  build: {
    target: [ 'chrome107', 'edge107', 'firefox104', 'safari16' ],
    polyfillModulePreload: true,
    modulePreload: { polyfill: true },
    outDir: '/Users/dero/Documents/badgenode_main/dist/public',
    assetsDir: 'assets',
    assetsInlineLimit: 4096,
    sourcemap: false,
    terserOptions: {},
    rollupOptions: {
      output: {
        manualChunks: {
          react: [ 'react', 'react-dom' ],
          recharts: [ 'recharts' ],
          radix: [
            '@radix-ui/react-dropdown-menu',
            '@radix-ui/react-dialog',
            '@radix-ui/react-popover',
            '@radix-ui/react-accordion',
            '@radix-ui/react-alert-dialog',
            '@radix-ui/react-avatar',
            '@radix-ui/react-checkbox',
            '@radix-ui/react-tabs',
            '@radix-ui/react-toast',
            '@radix-ui/react-tooltip'
          ],
          supabase: [ '@supabase/supabase-js' ],
          query: [ '@tanstack/react-query' ]
        }
      },
      onwarn: [Function: onwarn]
    },
    commonjsOptions: { include: [ /node_modules/ ], extensions: [ '.js', '.cjs' ] },
    dynamicImportVarsOptions: { warnOnError: true, exclude: [ /node_modules/ ] },
    write: true,
    emptyOutDir: true,
    copyPublicDir: true,
    manifest: false,
    lib: false,
    ssrManifest: false,
    ssrEmitAssets: false,
    reportCompressedSize: true,
    chunkSizeWarningLimit: 500,
    watch: null,
    cssCodeSplit: true,
    minify: 'esbuild',
    ssr: false,
    emitAssets: false,
    createEnvironment: [Function: createEnvironment],
    cssTarget: [ 'chrome107', 'edge107', 'firefox104', 'safari16' ],
    cssMinify: true
  },
  server: {
    port: 5173,
    strictPort: false,
    host: undefined,
    allowedHosts: true,
    https: undefined,
    open: false,
    proxy: {
      '/api': {
        target: 'http://localhost:3001',
        changeOrigin: true,
        secure: false
      }
    },
    cors: {
      origin: /^https?:\/\/(?:(?:[^:]+\.)?localhost|127\.0\.0\.1|\[::1\])(?::\d+)?$/
    },
    headers: {},
    warmup: { clientFiles: [], ssrFiles: [] },
    middlewareMode: true,
    fs: {
      strict: true,
      deny: [ '**/.*' ],
      allow: [ '/Users/dero/Documents/badgenode_main' ]
    },
    preTransformRequests: true,
    perEnvironmentStartEndDuringDev: false,
    sourcemapIgnoreList: [Function: isInNodeModules],
    hmr: {
      server: Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        requestTimeout: 300000,
        headersTimeout: 60000,
        keepAliveTimeout: 5000,
        connectionsCheckingInterval: 30000,
        requireHostHeader: true,
        joinDuplicateHeaders: undefined,
        rejectNonStandardBodyWrites: false,
        _events: [Object: null prototype] {
          request: <ref *1> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            query: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *1] },
            response: ServerResponse { app: [Circular *1] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: '/Users/dero/Documents/badgenode_main/views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: '/Users/dero/Documents/badgenode_main/views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: urlencodedParser],
                  name: 'urlencodedParser',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: requestIdMiddleware],
                  name: 'requestIdMiddleware',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: readOnlyGuard],
                  name: 'readOnlyGuard',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [ [Layer], [Layer] ]
                  },
                  name: 'router',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/api\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [ [Layer] ]
                  },
                  name: 'router',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/api\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function: bound dispatch],
                  name: 'bound dispatch',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/api\/ready\/?$/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: Route {
                    path: '/api/ready',
                    stack: [ [Layer] ],
                    methods: { get: true }
                  }
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      [Layer],
                      [Layer],
                      [Layer],
                      [Layer],
                      [Layer],
                      [Layer]
                    ]
                  },
                  name: 'router',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [ [Layer], [Layer], [Layer] ]
                  },
                  name: 'router',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [ [Layer], [Layer], [Layer], [Layer], [Layer] ]
                  },
                  name: 'router',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [ [Layer], [Layer], [Layer], [Layer] ]
                  },
                  name: 'router',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/api\/timbrature\/?(?=\/|$)/i {
                    fast_star: false,
                    fast_slash: false
                  },
                  route: undefined
                },
                Layer {
                  handle: [Function (anonymous)],
                  name: '<anonymous>',
                  params: undefined,
                  path: undefined,
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener],
          listening: [Function: setupConnectionsTracking]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 0,
        _handle: null,
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        _listeningId: 1,
        allowHalfOpen: true,
        pauseOnConnect: false,
        noDelay: true,
        keepAlive: false,
        keepAliveInitialDelay: 0,
        highWaterMark: 65536,
        httpAllowHalfOpen: false,
        timeout: 0,
        maxHeadersCount: null,
        maxRequestsPerSocket: 0,
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: -1,
        [Symbol(kUniqueHeaders)]: null
      }
    }
  },
  define: {
    'import.meta.env.VITE_SUPABASE_URL': '"https://tutllgsjrbxkmrwseogz.supabase.co"',
    'import.meta.env.VITE_SUPABASE_ANON_KEY': '"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InR1dGxsZ3NqcmJ4a21yd3Nlb2d6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAyMTU4MTQsImV4cCI6MjA3NTc5MTgxNH0.TnHXfwBI-KRaill9EIxreEXUyyDV1_RDLBmeDrJWfcY"'
  },
  configFile: '/Users/dero/Documents/badgenode_main/vite.config.ts',
  customLogger: {
    hasWarned: false,
    info: [Function: info],
    warn: [Function: warn],
    warnOnce: [Function: warnOnce],
    error: [Function: error],
    clearScreen: [Function: clearScreen],
    hasErrorLogged: [Function: hasErrorLogged]
  },
  appType: 'custom',
  esbuild: { jsxDev: true, jsx: 'automatic', jsxImportSource: undefined },
  optimizeDeps: {
    include: [
      'react',
      'react-dom',
      'react/jsx-dev-runtime',
      'react/jsx-runtime'
    ],
    exclude: [],
    needsInterop: [],
    extensions: [],
    disabled: undefined,
    holdUntilCrawlEnd: true,
    force: false,
    noDiscovery: false,
    esbuildOptions: { preserveSymlinks: false, jsx: 'automatic' }
  },
  ssr: {
    target: 'node',
    optimizeDeps: {
      esbuildOptions: { preserveSymlinks: false },
      include: [],
      exclude: [],
      needsInterop: [],
      extensions: [],
      holdUntilCrawlEnd: true,
      force: false,
      noDiscovery: true
    },
    noExternal: [ 'workbox-window' ],
    external: [],
    resolve: {
      conditions: [ 'module', 'node', 'development|production' ],
      externalConditions: [ 'node', 'module-sync' ]
    }
  },
  environments: {
    client: {
      define: {
        'import.meta.env.VITE_SUPABASE_URL': '"https://tutllgsjrbxkmrwseogz.supabase.co"',
        'import.meta.env.VITE_SUPABASE_ANON_KEY': '"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InR1dGxsZ3NqcmJ4a21yd3Nlb2d6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAyMTU4MTQsImV4cCI6MjA3NTc5MTgxNH0.TnHXfwBI-KRaill9EIxreEXUyyDV1_RDLBmeDrJWfcY"'
      },
      resolve: {
        externalConditions: [ 'node', 'module-sync' ],
        extensions: [
          '.mjs',  '.js',
          '.mts',  '.ts',
          '.jsx',  '.tsx',
          '.json'
        ],
        dedupe: [ 'react', 'react-dom' ],
        noExternal: [],
        external: [],
        preserveSymlinks: false,
        alias: [
          {
            find: '@',
            replacement: '/Users/dero/Documents/badgenode_main/client/src'
          },
          {
            find: '@shared',
            replacement: '/Users/dero/Documents/badgenode_main/server/shared'
          },
          {
            find: /^\/?@vite\/env/,
            replacement: '/@fs/Users/dero/Documents/badgenode_main/node_modules/vite/dist/client/env.mjs'
          },
          {
            find: /^\/?@vite\/client/,
            replacement: '/@fs/Users/dero/Documents/badgenode_main/node_modules/vite/dist/client/client.mjs'
          }
        ],
        mainFields: [ 'browser', 'module', 'jsnext:main', 'jsnext' ],
        conditions: [ 'module', 'browser', 'development|production' ],
        builtins: []
      },
      keepProcessEnv: false,
      consumer: 'client',
      optimizeDeps: {
        include: [
          'react',
          'react-dom',
          'react/jsx-dev-runtime',
          'react/jsx-runtime'
        ],
        exclude: [],
        needsInterop: [],
        extensions: [],
        disabled: undefined,
        holdUntilCrawlEnd: true,
        force: false,
        noDiscovery: false,
        esbuildOptions: { preserveSymlinks: false, jsx: 'automatic' }
      },
      dev: {
        warmup: [],
        sourcemap: { js: true },
        sourcemapIgnoreList: [Function: isInNodeModules],
        preTransformRequests: true,
        createEnvironment: [Function: defaultCreateClientDevEnvironment],
        recoverable: true,
        moduleRunnerTransform: false
      },
      build: {
        target: [ 'chrome107', 'edge107', 'firefox104', 'safari16' ],
        polyfillModulePreload: true,
        modulePreload: { polyfill: true },
        outDir: '/Users/dero/Documents/badgenode_main/dist/public',
        assetsDir: 'assets',
        assetsInlineLimit: 4096,
        sourcemap: false,
        terserOptions: {},
        rollupOptions: {
          output: {
            manualChunks: {
              react: [ 'react', 'react-dom' ],
              recharts: [ 'recharts' ],
              radix: [
                '@radix-ui/react-dropdown-menu',
                '@radix-ui/react-dialog',
                '@radix-ui/react-popover',
                '@radix-ui/react-accordion',
                '@radix-ui/react-alert-dialog',
                '@radix-ui/react-avatar',
                '@radix-ui/react-checkbox',
                '@radix-ui/react-tabs',
                '@radix-ui/react-toast',
                '@radix-ui/react-tooltip'
              ],
              supabase: [ '@supabase/supabase-js' ],
              query: [ '@tanstack/react-query' ]
            }
          },
          onwarn: [Function: onwarn]
        },
        commonjsOptions: { include: [ /node_modules/ ], extensions: [ '.js', '.cjs' ] },
        dynamicImportVarsOptions: { warnOnError: true, exclude: [ /node_modules/ ] },
        write: true,
        emptyOutDir: true,
        copyPublicDir: true,
        manifest: false,
        lib: false,
        ssrManifest: false,
        ssrEmitAssets: false,
        reportCompressedSize: true,
        chunkSizeWarningLimit: 500,
        watch: null,
        cssCodeSplit: true,
        minify: 'esbuild',
        ssr: false,
        emitAssets: true,
        createEnvironment: [Function: createEnvironment],
        cssTarget: [ 'chrome107', 'edge107', 'firefox104', 'safari16' ],
        cssMinify: true
      },
      plugins: [
        {
          name: 'vite:optimized-deps',
          applyToEnvironment: [Function: applyToEnvironment],
          resolveId: [Function: resolveId],
          load: [AsyncFunction: load]
        },
        {
          name: 'vite:watch-package-data',
          buildStart: [Function: buildStart],
          buildEnd: [Function: buildEnd],
          watchChange: [Function: watchChange]
        },
        {
          name: 'vite:pre-alias',
          applyToEnvironment: [Function: applyToEnvironment],
          resolveId: [AsyncFunction: resolveId]
        },
        {
          name: 'alias',
          buildStart: [AsyncFunction: buildStart],
          resolveId: [Function: resolveId]
        },
        {
          name: 'vite:react-babel',
          enforce: 'pre',
          config: [Function: config],
          configResolved: [Function: configResolved],
          options: [Function: options],
          transform: {
            filter: {
              id: {
                include: /\.[tj]sx?(?:\?.*)?$/,
                exclude: [ /\/node_modules\// ]
              }
            },
            handler: [AsyncFunction: handler]
          }
        },
        {
          name: 'vite:react-refresh',
          enforce: 'pre',
          config: [Function: config],
          resolveId: {
            filter: { id: /^\/@react\-refresh$/ },
            handler: [Function: handler]
          },
          load: {
            filter: { id: /^\/@react\-refresh$/ },
            handler: [Function: handler]
          },
          transformIndexHtml: [Function: transformIndexHtml]
        },
        {
          name: 'unplugin-icons',
          enforce: 'pre',
          resolveId: [Function: resolveId],
          loadInclude: [Function: loadInclude],
          load: [Function (anonymous)],
          rollup: { api: { config: { compiler: 'jsx', jsx: 'react' } } }
        },
        {
          name: 'vite-plugin-pwa',
          enforce: 'pre',
          config: [Function: config],
          configResolved: [AsyncFunction: configResolved],
          resolveId: {
            filter: { id: /^virtual:pwa\-register/ },
            handler: [Function: handler]
          },
          load: {
            filter: { id: /^\/@vite\-plugin\-pwa\// },
            handler: [Function: handler]
          },
          api: {
            disabled: [Getter],
            pwaInDevEnvironment: [Getter],
            webManifestData: [Function: webManifestData],
            registerSWData: [Function: registerSWData],
            generateBundle: [Function: generateBundle],
            generateSW: [AsyncFunction: generateSW],
            extendManifestEntries: [Function: extendManifestEntries],
            pwaAssetsGenerator: [Function: pwaAssetsGenerator]
          }
        },
        {
          name: 'vite:modulepreload-polyfill',
          resolveId: {
            filter: { id: /^vite\/modulepreload\-polyfill$/ },
            handler: [Function: handler]
          },
          load: {
            filter: { id: /^ vite\/modulepreload\-polyfill\.js$/ },
            handler: [Function: handler]
          }
        },
        {
          name: 'vite:resolve',
          resolveId: {
            filter: { id: { exclude: /^(?:\0|\/?virtual:)/ } },
            handler: [AsyncFunction: handler]
          },
          load: {
            filter: {
              id: [
                /^__vite\-browser\-external/,
                /^__vite\-optional\-peer\-dep/
              ]
            },
            handler: [Function: handler]
          }
        },
        {
          name: 'vite:html-inline-proxy',
          resolveId: {
            filter: { id: /[?&]html-proxy\b/ },
            handler: [Function: handler]
          },
          load: {
            filter: { id: /[?&]html-proxy\b/ },
            handler: [Function: handler]
          }
        },
        {
          name: 'vite:css',
          buildStart: [Function: buildStart],
          buildEnd: [Function: buildEnd],
          load: {
            filter: {
              id: /\.(css|less|sass|scss|styl|stylus|pcss|postcss|sss)(?:$|\?)/
            },
            handler: [AsyncFunction: handler]
          },
          transform: {
            filter: {
              id: {
                include: /\.(css|less|sass|scss|styl|stylus|pcss|postcss|sss)(?:$|\?)/,
                exclude: [
                  /[?&]commonjs-proxy/,
                  /[?&](?:worker|sharedworker|raw|url)\b/
                ]
              }
            },
            handler: [AsyncFunction: handler]
          }
        },
        {
          name: 'vite:esbuild',
          configureServer: [Function: configureServer],
          transform: [AsyncFunction: transform]
        },
        {
          name: 'vite:json',
          transform: {
            filter: {
              id: {
                include: /\.json(?:$|\?)(?!commonjs-(?:proxy|external))/,
                exclude: /[?&](?:worker|sharedworker|raw|url)\b/
              }
            },
            handler: [Function: handler]
          }
        },
        {
          name: 'vite:wasm-helper',
          resolveId: {
            filter: { id: /^ vite\/wasm\-helper\.js$/ },
            handler: [Function: handler]
          },
          load: {
            filter: {
              id: [
                /^ vite\/wasm\-helper\.js$/,
                /(?<![?#].*)\.wasm\?init/
              ]
            },
            handler: [AsyncFunction: handler]
          }
        },
        {
          name: 'vite:worker',
          buildStart: [Function: buildStart],
          load: {
            filter: { id: /(?:\?|&)(worker|sharedworker)(?:&|$)/ },
            handler: [AsyncFunction: handler]
          },
          shouldTransformCachedModule: [Function: shouldTransformCachedModule],
          transform: {
            filter: { id: /(?:\?|&)worker_file&type=(\w+)(?:&|$)/ },
            handler: [AsyncFunction: handler]
          },
          renderChunk: [Function: renderChunk],
          generateBundle: [Function: generateBundle]
        },
        {
          name: 'vite:asset',
          perEnvironmentStartEndDuringDev: true,
          buildStart: [Function: buildStart],
          resolveId: { handler: [Function: handler] },
          load: {
            filter: { id: { exclude: /^\0/ } },
            handler: [AsyncFunction: handler]
          },
          renderChunk: [Function: renderChunk],
          generateBundle: [Function: generateBundle]
        },
        {
          name: 'vite-plugin-pwa:dev-sw',
          apply: 'serve',
          options: [Function: options],
          transformIndexHtml: {
            order: 'post',
            handler: [AsyncFunction: handler],
            enforce: 'post',
            transform: [AsyncFunction: transform]
          },
          configureServer: [Function: configureServer],
          resolveId: {
            filter: { id: /^\/@vite\-plugin\-pwa\/pwa\-entry\-point\-loaded$/ },
            handler: [Function: handler]
          },
          load: {
            filter: {
              id: /^ \/@vite\-plugin\-pwa\/pwa\-entry\-point\-loaded$/
            },
            handler: [AsyncFunction: handler]
          }
        },
        {
          name: 'vite:wasm-fallback',
          load: { filter: { id: /\.wasm$/ }, handler: [Function: handler] }
        },
        {
          name: 'vite:define',
          transform: { handler: [AsyncFunction: handler] }
        },
        {
          name: 'vite:css-post',
          renderStart: [Function: renderStart],
          transform: {
            filter: {
              id: {
                include: /\.(css|less|sass|scss|styl|stylus|pcss|postcss|sss)(?:$|\?)/,
                exclude: [
                  /[?&]commonjs-proxy/,
                  /[?&](?:worker|sharedworker|raw|url)\b/
                ]
              }
            },
            handler: [AsyncFunction: handler]
          },
          renderChunk: [AsyncFunction: renderChunk],
          augmentChunkHash: [Function: augmentChunkHash],
          generateBundle: [AsyncFunction: generateBundle]
        },
        {
          name: 'vite:worker-import-meta-url',
          applyToEnvironment: [Function: applyToEnvironment],
          shouldTransformCachedModule: [Function: shouldTransformCachedModule],
          transform: {
            filter: {
              code: /new\s+(?:Worker|SharedWorker)\s*\(\s*new\s+URL.+?import\.meta\.url/s
            },
            handler: [AsyncFunction: handler]
          }
        },
        {
          name: 'vite:asset-import-meta-url',
          applyToEnvironment: [Function: applyToEnvironment],
          transform: {
            filter: {
              id: {
                exclude: [
                  /^ vite\/preload\-helper\.js$/,
                  /^\/Users\/dero\/Documents\/badgenode_main\/node_modules\/vite\/dist\/client\/client\.mjs$/
                ]
              },
              code: /new\s+URL.+import\.meta\.url/s
            },
            handler: [AsyncFunction: handler]
          }
        },
        {
          name: 'vite:dynamic-import-vars',
          resolveId: {
            filter: { id: /^ vite\/dynamic\-import\-helper\.js$/ },
            handler: [Function: handler]
          },
          load: {
            filter: { id: /^ vite\/dynamic\-import\-helper\.js$/ },
            handler: [Function: handler]
          },
          transform: {
            filter: {
              id: {
                exclude: /^\/Users\/dero\/Documents\/badgenode_main\/node_modules\/vite\/dist\/client\/client\.mjs$/
              },
              code: /\bimport\s*[(/]/
            },
            handler: [AsyncFunction: handler]
          }
        },
        {
          name: 'vite:import-glob',
          buildStart: [Function: buildStart],
          transform: {
            filter: { code: 'import.meta.glob' },
            handler: [AsyncFunction: handler]
          },
          hotUpdate: [Function: hotUpdate]
        },
        {
          name: 'vite-plugin-pwa:info',
          enforce: 'post',
          resolveId: {
            filter: { id: /^virtual:pwa\-info$/ },
            handler: [Function: handler]
          },
          load: {
            filter: { id: /^ virtual:pwa\-info$/ },
            handler: [Function: handler]
          }
        },
        {
          name: 'vite-plugin-pwa:pwa-assets',
          enforce: 'post',
          transformIndexHtml: {
            order: 'post',
            handler: [AsyncFunction: handler],
            enforce: 'post',
            transform: [AsyncFunction: transform]
          },
          resolveId: {
            filter: {
              id: [
                /^virtual:pwa\-assets\/head$/,
                /^virtual:pwa\-assets\/icons$/
              ]
            },
            handler: [Function: handler]
          },
          load: {
            filter: {
              id: [
                /^ virtual:pwa\-assets\/head$/,
                /^ virtual:pwa\-assets\/icons$/
              ]
            },
            handler: [AsyncFunction: handler]
          },
          handleHotUpdate: [AsyncFunction: handleHotUpdate],
          configureServer: [Function: configureServer]
        },
        {
          name: 'vite:client-inject',
          buildStart: [AsyncFunction: buildStart],
          transform: [AsyncFunction: transform]
        },
        {
          name: 'vite:css-analysis',
          transform: {
            filter: {
              id: {
                include: /\.(css|less|sass|scss|styl|stylus|pcss|postcss|sss)(?:$|\?)/,
                exclude: [
                  /[?&]commonjs-proxy/,
                  /[?&](?:worker|sharedworker|raw|url)\b/
                ]
              }
            },
            handler: [AsyncFunction: handler]
          }
        },
        {
          name: 'vite:import-analysis',
          transform: [AsyncFunction: transform]
        }
      ]
    },
    ssr: {
      define: {
        'import.meta.env.VITE_SUPABASE_URL': '"https://tutllgsjrbxkmrwseogz.supabase.co"',
        'import.meta.env.VITE_SUPABASE_ANON_KEY': '"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InR1dGxsZ3NqcmJ4a21yd3Nlb2d6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAyMTU4MTQsImV4cCI6MjA3NTc5MTgxNH0.TnHXfwBI-KRaill9EIxreEXUyyDV1_RDLBmeDrJWfcY"'
      },
      resolve: {
        externalConditions: [ 'node', 'module-sync' ],
        extensions: [
          '.mjs',  '.js',
          '.mts',  '.ts',
          '.jsx',  '.tsx',
          '.json'
        ],
        dedupe: [ 'react', 'react-dom' ],
        noExternal: [ 'workbox-window' ],
        external: [],
        preserveSymlinks: false,
        alias: [
          {
            find: '@',
            replacement: '/Users/dero/Documents/badgenode_main/client/src'
          },
          {
            find: '@shared',
            replacement: '/Users/dero/Documents/badgenode_main/server/shared'
          },
          {
            find: /^\/?@vite\/env/,
            replacement: '/@fs/Users/dero/Documents/badgenode_main/node_modules/vite/dist/client/env.mjs'
          },
          {
            find: /^\/?@vite\/client/,
            replacement: '/@fs/Users/dero/Documents/badgenode_main/node_modules/vite/dist/client/client.mjs'
          }
        ],
        mainFields: [ 'module', 'jsnext:main', 'jsnext' ],
        conditions: [ 'module', 'node', 'development|production' ],
        builtins: [
          '_http_agent',         '_http_client',        '_http_common',
          '_http_incoming',      '_http_outgoing',      '_http_server',
          '_stream_duplex',      '_stream_passthrough', '_stream_readable',
          '_stream_transform',   '_stream_wrap',        '_stream_writable',
          '_tls_common',         '_tls_wrap',           'assert',
          'assert/strict',       'async_hooks',         'buffer',
          'child_process',       'cluster',             'console',
          'constants',           'crypto',              'dgram',
          'diagnostics_channel', 'dns',                 'dns/promises',
          'domain',              'events',              'fs',
          'fs/promises',         'http',                'http2',
          'https',               'inspector',           'inspector/promises',
          'module',              'net',                 'os',
          'path',                'path/posix',          'path/win32',
          'perf_hooks',          'process',             'punycode',
          'querystring',         'readline',            'readline/promises',
          'repl',                'stream',              'stream/consumers',
          'stream/promises',     'stream/web',          'string_decoder',
          'sys',                 'timers',              'timers/promises',
          'tls',                 'trace_events',        'tty',
          'url',                 'util',                'util/types',
          'v8',                  'vm',                  'wasi',
          'worker_threads',      'zlib',                /^node:/,
          /^bun:/
        ]
      },
      keepProcessEnv: true,
      consumer: 'server',
      optimizeDeps: {
        include: [],
        exclude: [],
        needsInterop: [],
        extensions: [],
        disabled: undefined,
        holdUntilCrawlEnd: true,
        force: false,
        noDiscovery: true,
        esbuildOptions: { preserveSymlinks: false }
      },
      dev: {
        warmup: [],
        sourcemap: { js: true },
        sourcemapIgnoreList: [Function: isInNodeModules],
        preTransformRequests: false,
        createEnvironment: [Function: defaultCreateDevEnvironment],
        recoverable: false,
        moduleRunnerTransform: true
      },
      build: {
        target: [ 'chrome107', 'edge107', 'firefox104', 'safari16' ],
        polyfillModulePreload: true,
        modulePreload: { polyfill: true },
        outDir: '/Users/dero/Documents/badgenode_main/dist/public',
        assetsDir: 'assets',
        assetsInlineLimit: 4096,
        sourcemap: false,
        terserOptions: {},
        rollupOptions: {
          output: {
            manualChunks: {
              react: [ 'react', 'react-dom' ],
              recharts: [ 'recharts' ],
              radix: [
                '@radix-ui/react-dropdown-menu',
                '@radix-ui/react-dialog',
                '@radix-ui/react-popover',
                '@radix-ui/react-accordion',
                '@radix-ui/react-alert-dialog',
                '@radix-ui/react-avatar',
                '@radix-ui/react-checkbox',
                '@radix-ui/react-tabs',
                '@radix-ui/react-toast',
                '@radix-ui/react-tooltip'
              ],
              supabase: [ '@supabase/supabase-js' ],
              query: [ '@tanstack/react-query' ]
            }
          },
          onwarn: [Function: onwarn]
        },
        commonjsOptions: { include: [ /node_modules/ ], extensions: [ '.js', '.cjs' ] },
        dynamicImportVarsOptions: { warnOnError: true, exclude: [ /node_modules/ ] },
        write: true,
        emptyOutDir: true,
        copyPublicDir: true,
        manifest: false,
        lib: false,
        ssrManifest: false,
        ssrEmitAssets: false,
        reportCompressedSize: true,
        chunkSizeWarningLimit: 500,
        watch: null,
        cssCodeSplit: true,
        minify: false,
        ssr: true,
        emitAssets: false,
        createEnvironment: [Function: createEnvironment],
        cssTarget: [ 'chrome107', 'edge107', 'firefox104', 'safari16' ],
        cssMinify: 'esbuild'
      },
      plugins: [
        {
          name: 'vite:watch-package-data',
          buildStart: [Function: buildStart],
          buildEnd: [Function: buildEnd],
          watchChange: [Function: watchChange]
        },
        {
          name: 'alias',
          buildStart: [AsyncFunction: buildStart],
          resolveId: [Function: resolveId]
        },
        {
          name: 'vite:react-babel',
          enforce: 'pre',
          config: [Function: config],
          configResolved: [Function: configResolved],
          options: [Function: options],
          transform: {
            filter: {
              id: {
                include: /\.[tj]sx?(?:\?.*)?$/,
                exclude: [ /\/node_modules\// ]
              }
            },
            handler: [AsyncFunction: handler]
          }
        },
        {
          name: 'vite:react-refresh',
          enforce: 'pre',
          config: [Function: config],
          resolveId: {
            filter: { id: /^\/@react\-refresh$/ },
            handler: [Function: handler]
          },
          load: {
            filter: { id: /^\/@react\-refresh$/ },
            handler: [Function: handler]
          },
          transformIndexHtml: [Function: transformIndexHtml]
        },
        {
          name: 'unplugin-icons',
          enforce: 'pre',
          resolveId: [Function: resolveId],
          loadInclude: [Function: loadInclude],
          load: [Function (anonymous)],
          rollup: { api: { config: { compiler: 'jsx', jsx: 'react' } } }
        },
        {
          name: 'vite-plugin-pwa',
          enforce: 'pre',
          config: [Function: config],
          configResolved: [AsyncFunction: configResolved],
          resolveId: {
            filter: { id: /^virtual:pwa\-register/ },
            handler: [Function: handler]
          },
          load: {
            filter: { id: /^\/@vite\-plugin\-pwa\// },
            handler: [Function: handler]
          },
          api: {
            disabled: [Getter],
            pwaInDevEnvironment: [Getter],
            webManifestData: [Function: webManifestData],
            registerSWData: [Function: registerSWData],
            generateBundle: [Function: generateBundle],
            generateSW: [AsyncFunction: generateSW],
            extendManifestEntries: [Function: extendManifestEntries],
            pwaAssetsGenerator: [Function: pwaAssetsGenerator]
          }
        },
        {
          name: 'vite:modulepreload-polyfill',
          resolveId: {
            filter: { id: /^vite\/modulepreload\-polyfill$/ },
            handler: [Function: handler]
          },
          load: {
            filter: { id: /^ vite\/modulepreload\-polyfill\.js$/ },
            handler: [Function: handler]
          }
        },
        {
          name: 'vite:resolve',
          resolveId: {
            filter: { id: { exclude: /^(?:\0|\/?virtual:)/ } },
            handler: [AsyncFunction: handler]
          },
          load: {
            filter: {
              id: [
                /^__vite\-browser\-external/,
                /^__vite\-optional\-peer\-dep/
              ]
            },
            handler: [Function: handler]
          }
        },
        {
          name: 'vite:html-inline-proxy',
          resolveId: {
            filter: { id: /[?&]html-proxy\b/ },
            handler: [Function: handler]
          },
          load: {
            filter: { id: /[?&]html-proxy\b/ },
            handler: [Function: handler]
          }
        },
        {
          name: 'vite:css',
          buildStart: [Function: buildStart],
          buildEnd: [Function: buildEnd],
          load: {
            filter: {
              id: /\.(css|less|sass|scss|styl|stylus|pcss|postcss|sss)(?:$|\?)/
            },
            handler: [AsyncFunction: handler]
          },
          transform: {
            filter: {
              id: {
                include: /\.(css|less|sass|scss|styl|stylus|pcss|postcss|sss)(?:$|\?)/,
                exclude: [
                  /[?&]commonjs-proxy/,
                  /[?&](?:worker|sharedworker|raw|url)\b/
                ]
              }
            },
            handler: [AsyncFunction: handler]
          }
        },
        {
          name: 'vite:esbuild',
          configureServer: [Function: configureServer],
          transform: [AsyncFunction: transform]
        },
        {
          name: 'vite:json',
          transform: {
            filter: {
              id: {
                include: /\.json(?:$|\?)(?!commonjs-(?:proxy|external))/,
                exclude: /[?&](?:worker|sharedworker|raw|url)\b/
              }
            },
            handler: [Function: handler]
          }
        },
        {
          name: 'vite:wasm-helper',
          resolveId: {
            filter: { id: /^ vite\/wasm\-helper\.js$/ },
            handler: [Function: handler]
          },
          load: {
            filter: {
              id: [
                /^ vite\/wasm\-helper\.js$/,
                /(?<![?#].*)\.wasm\?init/
              ]
            },
            handler: [AsyncFunction: handler]
          }
        },
        {
          name: 'vite:worker',
          buildStart: [Function: buildStart],
          load: {
            filter: { id: /(?:\?|&)(worker|sharedworker)(?:&|$)/ },
            handler: [AsyncFunction: handler]
          },
          shouldTransformCachedModule: [Function: shouldTransformCachedModule],
          transform: {
            filter: { id: /(?:\?|&)worker_file&type=(\w+)(?:&|$)/ },
            handler: [AsyncFunction: handler]
          },
          renderChunk: [Function: renderChunk],
          generateBundle: [Function: generateBundle]
        },
        {
          name: 'vite:asset',
          perEnvironmentStartEndDuringDev: true,
          buildStart: [Function: buildStart],
          resolveId: { handler: [Function: handler] },
          load: {
            filter: { id: { exclude: /^\0/ } },
            handler: [AsyncFunction: handler]
          },
          renderChunk: [Function: renderChunk],
          generateBundle: [Function: generateBundle]
        },
        {
          name: 'vite-plugin-pwa:dev-sw',
          apply: 'serve',
          options: [Function: options],
          transformIndexHtml: {
            order: 'post',
            handler: [AsyncFunction: handler],
            enforce: 'post',
            transform: [AsyncFunction: transform]
          },
          configureServer: [Function: configureServer],
          resolveId: {
            filter: { id: /^\/@vite\-plugin\-pwa\/pwa\-entry\-point\-loaded$/ },
            handler: [Function: handler]
          },
          load: {
            filter: {
              id: /^ \/@vite\-plugin\-pwa\/pwa\-entry\-point\-loaded$/
            },
            handler: [AsyncFunction: handler]
          }
        },
        {
          name: 'vite:wasm-fallback',
          load: { filter: { id: /\.wasm$/ }, handler: [Function: handler] }
        },
        {
          name: 'vite:define',
          transform: { handler: [AsyncFunction: handler] }
        },
        {
          name: 'vite:css-post',
          renderStart: [Function: renderStart],
          transform: {
            filter: {
              id: {
                include: /\.(css|less|sass|scss|styl|stylus|pcss|postcss|sss)(?:$|\?)/,
                exclude: [
                  /[?&]commonjs-proxy/,
                  /[?&](?:worker|sharedworker|raw|url)\b/
                ]
              }
            },
            handler: [AsyncFunction: handler]
          },
          renderChunk: [AsyncFunction: renderChunk],
          augmentChunkHash: [Function: augmentChunkHash],
          generateBundle: [AsyncFunction: generateBundle]
        },
        {
          name: 'vite:dynamic-import-vars',
          resolveId: {
            filter: { id: /^ vite\/dynamic\-import\-helper\.js$/ },
            handler: [Function: handler]
          },
          load: {
            filter: { id: /^ vite\/dynamic\-import\-helper\.js$/ },
            handler: [Function: handler]
          },
          transform: {
            filter: {
              id: {
                exclude: /^\/Users\/dero\/Documents\/badgenode_main\/node_modules\/vite\/dist\/client\/client\.mjs$/
              },
              code: /\bimport\s*[(/]/
            },
            handler: [AsyncFunction: handler]
          }
        },
        {
          name: 'vite:import-glob',
          buildStart: [Function: buildStart],
          transform: {
            filter: { code: 'import.meta.glob' },
            handler: [AsyncFunction: handler]
          },
          hotUpdate: [Function: hotUpdate]
        },
        {
          name: 'vite-plugin-pwa:info',
          enforce: 'post',
          resolveId: {
            filter: { id: /^virtual:pwa\-info$/ },
            handler: [Function: handler]
          },
          load: {
            filter: { id: /^ virtual:pwa\-info$/ },
            handler: [Function: handler]
          }
        },
        {
          name: 'vite-plugin-pwa:pwa-assets',
          enforce: 'post',
          transformIndexHtml: {
            order: 'post',
            handler: [AsyncFunction: handler],
            enforce: 'post',
            transform: [AsyncFunction: transform]
          },
          resolveId: {
            filter: {
              id: [
                /^virtual:pwa\-assets\/head$/,
                /^virtual:pwa\-assets\/icons$/
              ]
            },
            handler: [Function: handler]
          },
          load: {
            filter: {
              id: [
                /^ virtual:pwa\-assets\/head$/,
                /^ virtual:pwa\-assets\/icons$/
              ]
            },
            handler: [AsyncFunction: handler]
          },
          handleHotUpdate: [AsyncFunction: handleHotUpdate],
          configureServer: [Function: configureServer]
        },
        {
          name: 'vite:client-inject',
          buildStart: [AsyncFunction: buildStart],
          transform: [AsyncFunction: transform]
        },
        {
          name: 'vite:css-analysis',
          transform: {
            filter: {
              id: {
                include: /\.(css|less|sass|scss|styl|stylus|pcss|postcss|sss)(?:$|\?)/,
                exclude: [
                  /[?&]commonjs-proxy/,
                  /[?&](?:worker|sharedworker|raw|url)\b/
                ]
              }
            },
            handler: [AsyncFunction: handler]
          }
        },
        {
          name: 'vite:import-analysis',
          transform: [AsyncFunction: transform]
        }
      ]
    }
  },
  configFileDependencies: [ '/Users/dero/Documents/badgenode_main/vite.config.ts' ],
  inlineConfig: {
    configFile: '/Users/dero/Documents/badgenode_main/vite.config.ts',
    customLogger: {
      hasWarned: false,
      info: [Function: info],
      warn: [Function: warn],
      warnOnce: [Function: warnOnce],
      error: [Function: error],
      clearScreen: [Function: clearScreen],
      hasErrorLogged: [Function: hasErrorLogged]
    },
    server: {
      middlewareMode: true,
      hmr: {
        server: Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          requestTimeout: 300000,
          headersTimeout: 60000,
          keepAliveTimeout: 5000,
          connectionsCheckingInterval: 30000,
          requireHostHeader: true,
          joinDuplicateHeaders: undefined,
          rejectNonStandardBodyWrites: false,
          _events: [Object: null prototype] {
            request: <ref *1> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              query: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *1] },
              response: ServerResponse { app: [Circular *1] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: '/Users/dero/Documents/badgenode_main/views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: '/Users/dero/Documents/badgenode_main/views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: requestIdMiddleware],
                    name: 'requestIdMiddleware',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: readOnlyGuard],
                    name: 'readOnlyGuard',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [Array]
                    },
                    name: 'router',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/api\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [Array]
                    },
                    name: 'router',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/api\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: bound dispatch],
                    name: 'bound dispatch',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/api\/ready\/?$/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: Route {
                      path: '/api/ready',
                      stack: [Array],
                      methods: [Object]
                    }
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [Array]
                    },
                    name: 'router',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [Array]
                    },
                    name: 'router',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [Array]
                    },
                    name: 'router',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [Array]
                    },
                    name: 'router',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/api\/timbrature\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener],
            listening: [Function: setupConnectionsTracking]
          },
          _eventsCount: 3,
          _maxListeners: undefined,
          _connections: 0,
          _handle: null,
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          _listeningId: 1,
          allowHalfOpen: true,
          pauseOnConnect: false,
          noDelay: true,
          keepAlive: false,
          keepAliveInitialDelay: 0,
          highWaterMark: 65536,
          httpAllowHalfOpen: false,
          timeout: 0,
          maxHeadersCount: null,
          maxRequestsPerSocket: 0,
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(shapeMode)]: false,
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: -1,
          [Symbol(kUniqueHeaders)]: null
        }
      },
      allowedHosts: true
    },
    appType: 'custom'
  },
  decodedBase: '/',
  rawBase: '/',
  publicDir: '/Users/dero/Documents/badgenode_main/client/public',
  cacheDir: '/Users/dero/Documents/badgenode_main/node_modules/.vite',
  command: 'serve',
  mode: 'development',
  isWorker: false,
  mainConfig: null,
  bundleChain: [],
  isProduction: false,
  css: {
    transformer: 'postcss',
    preprocessorMaxWorkers: true,
    devSourcemap: false
  },
  json: { namedExports: true, stringify: 'auto' },
  builder: undefined,
  preview: {
    port: 4173,
    strictPort: false,
    host: undefined,
    allowedHosts: true,
    https: undefined,
    open: false,
    proxy: {
      '/api': {
        target: 'http://localhost:3001',
        changeOrigin: true,
        secure: false
      }
    },
    cors: {
      origin: /^https?:\/\/(?:(?:[^:]+\.)?localhost|127\.0\.0\.1|\[::1\])(?::\d+)?$/
    },
    headers: {}
  },
  envDir: '/Users/dero/Documents/badgenode_main/client',
  env: {
    VITE_SUPABASE_URL: 'https://tutllgsjrbxkmrwseogz.supabase.co',
    VITE_SUPABASE_ANON_KEY: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InR1dGxsZ3NqcmJ4a21yd3Nlb2d6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAyMTU4MTQsImV4cCI6MjA3NTc5MTgxNH0.TnHXfwBI-KRaill9EIxreEXUyyDV1_RDLBmeDrJWfcY',
    BASE_URL: '/',
    MODE: 'development',
    DEV: true,
    PROD: false
  },
  assetsInclude: [Function: assetsInclude],
  logger: {
    hasWarned: false,
    info: [Function: info],
    warn: [Function: warn],
    warnOnce: [Function: warnOnce],
    error: [Function: error],
    clearScreen: [Function: clearScreen],
    hasErrorLogged: [Function: hasErrorLogged]
  },
  packageCache: Map(2) {
    'fnpd_/Users/dero/Documents/badgenode_main' => {
      dir: '/Users/dero/Documents/badgenode_main',
      data: {
        name: 'rest-express',
        version: '1.0.0',
        type: 'module',
        license: 'MIT',
        scripts: {
          dev: 'NODE_ENV=development tsx server/start.ts',
          'dev:client': 'vite',
          build: 'vite build && esbuild server/start.ts --platform=node --packages=external --bundle --format=esm --outdir=dist',
          'build:clean': 'rimraf dist && vite build && esbuild server/start.ts --platform=node --packages=external --bundle --format=esm --outdir=dist',
          start: 'NODE_ENV=production node dist/start.js',
          'env:write': 'node scripts/write-env.mjs',
          check: 'tsc -p tsconfig.json --noEmit',
          'check:dev': 'tsx scripts/check-dev.ts',
          'db:push': 'drizzle-kit push',
          lint: 'eslint . --ext .ts,.tsx',
          depcheck: 'npx depcheck --skip-missing true',
          tsprune: 'npx ts-prune',
          typecheck: 'tsc -p tsconfig.json --noEmit',
          'lint:strict': 'eslint . --ext .ts,.tsx',
          'lint:fix': 'eslint . --ext .ts,.tsx --fix',
          'analyze:knip': 'knip --reporter json --no-exit-code > DOCS/REPORT_GENERICI/knip.json || true',
          'analyze:tsprune': 'ts-prune -p tsconfig.json --ignore "**/*.d.ts" > DOCS/REPORT_GENERICI/tsprune.txt || true',
          'analyze:depcheck': 'depcheck --json > DOCS/REPORT_GENERICI/depcheck.json || true',
          'analyze:bundle': 'vite build --mode=production && npx vite-bundle-visualizer -s dist/public/assets --json DOCS/REPORT_GENERICI/bundle.json',
          'analyze:map': "source-map-explorer 'dist/public/assets/*.js' --json DOCS/REPORT_GENERICI/sme.json || true",
          'build:probe': 'vite build || true',
          format: 'prettier --write .',
          test: 'vitest run --coverage',
          'test:watch': 'vitest',
          e2e: 'playwright test --reporter=list',
          'esegui:backup': 'tsx scripts/backup.ts',
          'auto:start': 'tsx scripts/auto-start-dev.ts',
          'ensure:dev': 'tsx scripts/auto-start-dev.ts',
          'health:check': 'tsx scripts/health-check-runner.ts',
          'cascade:verify': 'tsx scripts/cascade-auto-wrapper.ts',
          'backup:list': 'ls -lah Backup_Automatico',
          'backup:restore': 'tsx scripts/backup-restore.ts',
          diagnose: 'tsx scripts/diagnose.ts',
          'diagnose:force': 'rm -f .diagnose_done && tsx scripts/diagnose.ts',
          'docs:consolidate': 'tsx scripts/consolidate-docs.ts',
          'gen:component': 'tsx scripts/template-component.ts',
          'seed:auth': 'node scripts/seed-auth.mjs',
          'clean:demo-users': 'tsx scripts/clean-demo-users.ts',
          'check:ci': 'bash scripts/ci/checks.sh',
          'icons:generate': 'npx tsx scripts/generate-pwa-icons.ts',
          'smoke:runtime': 'tsx scripts/ci/smoke-runtime.ts',
          'g:commit': 'node scripts/git-commit.mjs',
          'seed:dev': 'tsx scripts/seed_dev_supabase.ts',
          'seed:dev:clean': 'tsx scripts/seed_dev_cleanup.ts',
          postbuild: 'mkdir -p dist/public && cp -f client/public/_redirects dist/public/_redirects'
        },
        dependencies: {
          '@neondatabase/serverless': '^0.10.4',
          '@radix-ui/react-accordion': '^1.2.12',
          '@radix-ui/react-alert-dialog': '^1.1.7',
          '@radix-ui/react-aspect-ratio': '^1.1.3',
          '@radix-ui/react-avatar': '^1.1.4',
          '@radix-ui/react-checkbox': '^1.1.5',
          '@radix-ui/react-collapsible': '^1.1.4',
          '@radix-ui/react-context-menu': '^2.2.7',
          '@radix-ui/react-dialog': '^1.1.7',
          '@radix-ui/react-dropdown-menu': '^2.1.7',
          '@radix-ui/react-hover-card': '^1.1.7',
          '@radix-ui/react-label': '^2.1.3',
          '@radix-ui/react-menubar': '^1.1.7',
          '@radix-ui/react-navigation-menu': '^1.2.6',
          '@radix-ui/react-popover': '^1.1.7',
          '@radix-ui/react-progress': '^1.1.3',
          '@radix-ui/react-radio-group': '^1.2.4',
          '@radix-ui/react-scroll-area': '^1.2.4',
          '@radix-ui/react-select': '^2.1.7',
          '@radix-ui/react-separator': '^1.1.3',
          '@radix-ui/react-slider': '^1.2.4',
          '@radix-ui/react-slot': '^1.2.0',
          '@radix-ui/react-switch': '^1.1.4',
          '@radix-ui/react-tabs': '^1.1.4',
          '@radix-ui/react-toast': '^1.2.7',
          '@radix-ui/react-toggle': '^1.1.3',
          '@radix-ui/react-toggle-group': '^1.1.3',
          '@radix-ui/react-tooltip': '^1.2.0',
          '@supabase/supabase-js': '^2.74.0',
          '@tanstack/react-query': '^5.60.5',
          'class-variance-authority': '^0.7.1',
          clsx: '^2.1.1',
          cmdk: '^1.1.1',
          'date-fns': '^3.6.0',
          dotenv: '^17.2.3',
          'drizzle-orm': '^0.39.1',
          'drizzle-zod': '^0.7.0',
          'embla-carousel-react': '^8.6.0',
          exceljs: '^4.4.0',
          express: '^4.21.2',
          'input-otp': '^1.4.2',
          jspdf: '^3.0.3',
          'jspdf-autotable': '^5.0.2',
          'lucide-react': '^0.453.0',
          nanoid: '^5.1.6',
          react: '^18.3.1',
          'react-day-picker': '^8.10.1',
          'react-dom': '^18.3.1',
          'react-hook-form': '^7.55.0',
          'react-resizable-panels': '^2.1.7',
          recharts: '^2.15.2',
          'tailwind-merge': '^2.6.0',
          'tailwindcss-animate': '^1.0.7',
          vaul: '^1.1.2',
          wouter: '^3.3.5',
          zod: '^3.24.2'
        },
        devDependencies: {
          '@eslint/js': '^9.37.0',
          '@playwright/test': '^1.56.1',
          '@tailwindcss/typography': '^0.5.15',
          '@types/express': '4.17.21',
          '@types/node': '^20.16.11',
          '@types/react': '^18.3.11',
          '@types/react-dom': '^18.3.1',
          '@types/supertest': '^6.0.3',
          '@typescript-eslint/eslint-plugin': '^8.46.0',
          '@typescript-eslint/parser': '^8.46.0',
          '@vitejs/plugin-react': '^4.7.0',
          '@vitest/coverage-v8': '^3.2.4',
          autoprefixer: '^10.4.20',
          depcheck: '^1.4.7',
          'drizzle-kit': '^0.31.5',
          esbuild: '^0.25.0',
          eslint: '^9.37.0',
          'eslint-plugin-react': '^7.37.5',
          'eslint-plugin-react-hooks': '^6.1.1',
          'eslint-plugin-react-refresh': '^0.4.23',
          knip: '^5.65.0',
          postcss: '^8.4.47',
          prettier: '^3.6.2',
          sharp: '^0.34.4',
          'source-map-explorer': '^2.5.3',
          supertest: '^7.1.4',
          tailwindcss: '^3.4.17',
          'ts-prune': '^0.10.3',
          tsx: '^4.20.6',
          typescript: '5.6.3',
          'unplugin-icons': '^22.4.2',
          vite: '^7.1.11',
          'vite-bundle-visualizer': '^1.2.1',
          'vite-plugin-pwa': '^1.0.3',
          vitest: '^3.2.4'
        },
        optionalDependencies: { bufferutil: '^4.0.8' }
      },
      hasSideEffects: [Function: hasSideEffects],
      setResolvedCache: [Function: setResolvedCache],
      getResolvedCache: [Function: getResolvedCache]
    },
    'fnpd_/Users/dero/Documents/badgenode_main/client' => {
      dir: '/Users/dero/Documents/badgenode_main',
      data: {
        name: 'rest-express',
        version: '1.0.0',
        type: 'module',
        license: 'MIT',
        scripts: {
          dev: 'NODE_ENV=development tsx server/start.ts',
          'dev:client': 'vite',
          build: 'vite build && esbuild server/start.ts --platform=node --packages=external --bundle --format=esm --outdir=dist',
          'build:clean': 'rimraf dist && vite build && esbuild server/start.ts --platform=node --packages=external --bundle --format=esm --outdir=dist',
          start: 'NODE_ENV=production node dist/start.js',
          'env:write': 'node scripts/write-env.mjs',
          check: 'tsc -p tsconfig.json --noEmit',
          'check:dev': 'tsx scripts/check-dev.ts',
          'db:push': 'drizzle-kit push',
          lint: 'eslint . --ext .ts,.tsx',
          depcheck: 'npx depcheck --skip-missing true',
          tsprune: 'npx ts-prune',
          typecheck: 'tsc -p tsconfig.json --noEmit',
          'lint:strict': 'eslint . --ext .ts,.tsx',
          'lint:fix': 'eslint . --ext .ts,.tsx --fix',
          'analyze:knip': 'knip --reporter json --no-exit-code > DOCS/REPORT_GENERICI/knip.json || true',
          'analyze:tsprune': 'ts-prune -p tsconfig.json --ignore "**/*.d.ts" > DOCS/REPORT_GENERICI/tsprune.txt || true',
          'analyze:depcheck': 'depcheck --json > DOCS/REPORT_GENERICI/depcheck.json || true',
          'analyze:bundle': 'vite build --mode=production && npx vite-bundle-visualizer -s dist/public/assets --json DOCS/REPORT_GENERICI/bundle.json',
          'analyze:map': "source-map-explorer 'dist/public/assets/*.js' --json DOCS/REPORT_GENERICI/sme.json || true",
          'build:probe': 'vite build || true',
          format: 'prettier --write .',
          test: 'vitest run --coverage',
          'test:watch': 'vitest',
          e2e: 'playwright test --reporter=list',
          'esegui:backup': 'tsx scripts/backup.ts',
          'auto:start': 'tsx scripts/auto-start-dev.ts',
          'ensure:dev': 'tsx scripts/auto-start-dev.ts',
          'health:check': 'tsx scripts/health-check-runner.ts',
          'cascade:verify': 'tsx scripts/cascade-auto-wrapper.ts',
          'backup:list': 'ls -lah Backup_Automatico',
          'backup:restore': 'tsx scripts/backup-restore.ts',
          diagnose: 'tsx scripts/diagnose.ts',
          'diagnose:force': 'rm -f .diagnose_done && tsx scripts/diagnose.ts',
          'docs:consolidate': 'tsx scripts/consolidate-docs.ts',
          'gen:component': 'tsx scripts/template-component.ts',
          'seed:auth': 'node scripts/seed-auth.mjs',
          'clean:demo-users': 'tsx scripts/clean-demo-users.ts',
          'check:ci': 'bash scripts/ci/checks.sh',
          'icons:generate': 'npx tsx scripts/generate-pwa-icons.ts',
          'smoke:runtime': 'tsx scripts/ci/smoke-runtime.ts',
          'g:commit': 'node scripts/git-commit.mjs',
          'seed:dev': 'tsx scripts/seed_dev_supabase.ts',
          'seed:dev:clean': 'tsx scripts/seed_dev_cleanup.ts',
          postbuild: 'mkdir -p dist/public && cp -f client/public/_redirects dist/public/_redirects'
        },
        dependencies: {
          '@neondatabase/serverless': '^0.10.4',
          '@radix-ui/react-accordion': '^1.2.12',
          '@radix-ui/react-alert-dialog': '^1.1.7',
          '@radix-ui/react-aspect-ratio': '^1.1.3',
          '@radix-ui/react-avatar': '^1.1.4',
          '@radix-ui/react-checkbox': '^1.1.5',
          '@radix-ui/react-collapsible': '^1.1.4',
          '@radix-ui/react-context-menu': '^2.2.7',
          '@radix-ui/react-dialog': '^1.1.7',
          '@radix-ui/react-dropdown-menu': '^2.1.7',
          '@radix-ui/react-hover-card': '^1.1.7',
          '@radix-ui/react-label': '^2.1.3',
          '@radix-ui/react-menubar': '^1.1.7',
          '@radix-ui/react-navigation-menu': '^1.2.6',
          '@radix-ui/react-popover': '^1.1.7',
          '@radix-ui/react-progress': '^1.1.3',
          '@radix-ui/react-radio-group': '^1.2.4',
          '@radix-ui/react-scroll-area': '^1.2.4',
          '@radix-ui/react-select': '^2.1.7',
          '@radix-ui/react-separator': '^1.1.3',
          '@radix-ui/react-slider': '^1.2.4',
          '@radix-ui/react-slot': '^1.2.0',
          '@radix-ui/react-switch': '^1.1.4',
          '@radix-ui/react-tabs': '^1.1.4',
          '@radix-ui/react-toast': '^1.2.7',
          '@radix-ui/react-toggle': '^1.1.3',
          '@radix-ui/react-toggle-group': '^1.1.3',
          '@radix-ui/react-tooltip': '^1.2.0',
          '@supabase/supabase-js': '^2.74.0',
          '@tanstack/react-query': '^5.60.5',
          'class-variance-authority': '^0.7.1',
          clsx: '^2.1.1',
          cmdk: '^1.1.1',
          'date-fns': '^3.6.0',
          dotenv: '^17.2.3',
          'drizzle-orm': '^0.39.1',
          'drizzle-zod': '^0.7.0',
          'embla-carousel-react': '^8.6.0',
          exceljs: '^4.4.0',
          express: '^4.21.2',
          'input-otp': '^1.4.2',
          jspdf: '^3.0.3',
          'jspdf-autotable': '^5.0.2',
          'lucide-react': '^0.453.0',
          nanoid: '^5.1.6',
          react: '^18.3.1',
          'react-day-picker': '^8.10.1',
          'react-dom': '^18.3.1',
          'react-hook-form': '^7.55.0',
          'react-resizable-panels': '^2.1.7',
          recharts: '^2.15.2',
          'tailwind-merge': '^2.6.0',
          'tailwindcss-animate': '^1.0.7',
          vaul: '^1.1.2',
          wouter: '^3.3.5',
          zod: '^3.24.2'
        },
        devDependencies: {
          '@eslint/js': '^9.37.0',
          '@playwright/test': '^1.56.1',
          '@tailwindcss/typography': '^0.5.15',
          '@types/express': '4.17.21',
          '@types/node': '^20.16.11',
          '@types/react': '^18.3.11',
          '@types/react-dom': '^18.3.1',
          '@types/supertest': '^6.0.3',
          '@typescript-eslint/eslint-plugin': '^8.46.0',
          '@typescript-eslint/parser': '^8.46.0',
          '@vitejs/plugin-react': '^4.7.0',
          '@vitest/coverage-v8': '^3.2.4',
          autoprefixer: '^10.4.20',
          depcheck: '^1.4.7',
          'drizzle-kit': '^0.31.5',
          esbuild: '^0.25.0',
          eslint: '^9.37.0',
          'eslint-plugin-react': '^7.37.5',
          'eslint-plugin-react-hooks': '^6.1.1',
          'eslint-plugin-react-refresh': '^0.4.23',
          knip: '^5.65.0',
          postcss: '^8.4.47',
          prettier: '^3.6.2',
          sharp: '^0.34.4',
          'source-map-explorer': '^2.5.3',
          supertest: '^7.1.4',
          tailwindcss: '^3.4.17',
          'ts-prune': '^0.10.3',
          tsx: '^4.20.6',
          typescript: '5.6.3',
          'unplugin-icons': '^22.4.2',
          vite: '^7.1.11',
          'vite-bundle-visualizer': '^1.2.1',
          'vite-plugin-pwa': '^1.0.3',
          vitest: '^3.2.4'
        },
        optionalDependencies: { bufferutil: '^4.0.8' }
      },
      hasSideEffects: [Function: hasSideEffects],
      setResolvedCache: [Function: setResolvedCache],
      getResolvedCache: [Function: getResolvedCache]
    },
    set: [Function (anonymous)]
  },
  worker: { format: 'iife', plugins: '() => plugins', rollupOptions: {} },
  experimental: {
    importGlobRestoreExtension: false,
    renderBuiltUrl: undefined,
    hmrPartialAccept: false
  },
  future: undefined,
  dev: {
    warmup: [],
    sourcemap: { js: true },
    sourcemapIgnoreList: [Function: isInNodeModules],
    preTransformRequests: false,
    createEnvironment: [Function: defaultCreateDevEnvironment],
    recoverable: false,
    moduleRunnerTransform: false
  },
  webSocketToken: '-_myWufKTDUF',
  getSortedPlugins: [Function: getSortedPlugins],
  getSortedPluginHooks: [Function: getSortedPluginHooks],
  createResolver: [Function: createResolver],
  fsDenyGlob: [Function: arrayMatcher],
  safeModulePaths: Set(0) {},
  [Symbol(vite:resolved-config)]: true
}
Tue, 21 Oct 2025 21:28:18 GMT connect:dispatcher use / viteTimeMiddleware
Tue, 21 Oct 2025 21:28:18 GMT connect:dispatcher use / viteRejectInvalidRequestMiddleware
Tue, 21 Oct 2025 21:28:18 GMT connect:dispatcher use / corsMiddleware$2
Tue, 21 Oct 2025 21:28:18 GMT connect:dispatcher use / anonymous
Tue, 21 Oct 2025 21:28:18 GMT connect:dispatcher use / viteCachedTransformMiddleware
2025-10-21T21:28:18.929Z http-proxy-3 creating a ProxyServer { target: 'http://localhost:3001', changeOrigin: true, secure: false }
2025-10-21T21:28:18.929Z http-proxy-3 createRightProxy { type: 'web' }
2025-10-21T21:28:18.929Z http-proxy-3 createRightProxy { type: 'ws' }
Tue, 21 Oct 2025 21:28:18 GMT connect:dispatcher use / viteProxyMiddleware
Tue, 21 Oct 2025 21:28:18 GMT connect:dispatcher use /__open-in-editor launchEditorMiddleware$1
Tue, 21 Oct 2025 21:28:18 GMT connect:dispatcher use / viteHMRPingMiddleware
Tue, 21 Oct 2025 21:28:18 GMT connect:dispatcher use / viteServePublicMiddleware
Tue, 21 Oct 2025 21:28:18 GMT connect:dispatcher use / viteTransformMiddleware
Tue, 21 Oct 2025 21:28:18 GMT connect:dispatcher use / viteServeRawFsMiddleware
Tue, 21 Oct 2025 21:28:18 GMT connect:dispatcher use / viteServeStaticMiddleware
Tue, 21 Oct 2025 21:28:18 GMT connect:dispatcher use / viteErrorMiddleware
2025-10-21T21:28:18.948Z vite:deps (client) Hash is consistent. Skipping. Use --force to override.
Tue, 21 Oct 2025 21:28:18 GMT express:router use '/' app
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router use '/' serveStatic
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '/'
Tue, 21 Oct 2025 21:28:18 GMT express:router use '*' <anonymous>
Tue, 21 Oct 2025 21:28:18 GMT express:router:layer new '*'
[ENV][server] prefix: https://tutllgsjrbxk role: service
üöÄ Server running on port 10000
Tue, 21 Oct 2025 21:28:31 GMT express:router dispatching GET /api/health
Tue, 21 Oct 2025 21:28:31 GMT express:router query  : /api/health
Tue, 21 Oct 2025 21:28:31 GMT express:router expressInit  : /api/health
Tue, 21 Oct 2025 21:28:31 GMT express:router jsonParser  : /api/health
Tue, 21 Oct 2025 21:28:31 GMT body-parser:json skip empty body
Tue, 21 Oct 2025 21:28:31 GMT express:router urlencodedParser  : /api/health
Tue, 21 Oct 2025 21:28:31 GMT body-parser:urlencoded skip empty body
Tue, 21 Oct 2025 21:28:31 GMT express:router requestIdMiddleware  : /api/health
Tue, 21 Oct 2025 21:28:31 GMT express:router readOnlyGuard  : /api/health
Tue, 21 Oct 2025 21:28:31 GMT express:router <anonymous>  : /api/health
[REQ] GET /api/health
Tue, 21 Oct 2025 21:28:31 GMT express:router <anonymous>  : /api/health
Tue, 21 Oct 2025 21:28:31 GMT express:router <anonymous>  : /api/health
Tue, 21 Oct 2025 21:28:31 GMT express:router trim prefix (/api) from url /api/health
Tue, 21 Oct 2025 21:28:31 GMT express:router router /api : /api/health
Tue, 21 Oct 2025 21:28:31 GMT express:router dispatching GET /health
GET /api/health 200 in 2ms :: {"ok":true,"status":"healthy","service":"BadgeNod‚Ä¶
Tue, 21 Oct 2025 21:28:37 GMT express:router dispatching POST /api/utenti
Tue, 21 Oct 2025 21:28:37 GMT express:router query  : /api/utenti
Tue, 21 Oct 2025 21:28:37 GMT express:router expressInit  : /api/utenti
Tue, 21 Oct 2025 21:28:37 GMT express:router jsonParser  : /api/utenti
Tue, 21 Oct 2025 21:28:37 GMT body-parser:json content-type "application/json"
Tue, 21 Oct 2025 21:28:37 GMT body-parser:json content-encoding "identity"
Tue, 21 Oct 2025 21:28:37 GMT body-parser:json read body
Tue, 21 Oct 2025 21:28:37 GMT body-parser:json parse body
Tue, 21 Oct 2025 21:28:37 GMT body-parser:json parse json
Tue, 21 Oct 2025 21:28:37 GMT express:router urlencodedParser  : /api/utenti
Tue, 21 Oct 2025 21:28:37 GMT body-parser:urlencoded body already parsed
Tue, 21 Oct 2025 21:28:37 GMT express:router requestIdMiddleware  : /api/utenti
Tue, 21 Oct 2025 21:28:37 GMT express:router readOnlyGuard  : /api/utenti
Tue, 21 Oct 2025 21:28:37 GMT express:router <anonymous>  : /api/utenti
[REQ] POST /api/utenti
Tue, 21 Oct 2025 21:28:37 GMT express:router <anonymous>  : /api/utenti
Tue, 21 Oct 2025 21:28:37 GMT express:router <anonymous>  : /api/utenti
Tue, 21 Oct 2025 21:28:37 GMT express:router trim prefix (/api) from url /api/utenti
Tue, 21 Oct 2025 21:28:37 GMT express:router router /api : /api/utenti
Tue, 21 Oct 2025 21:28:37 GMT express:router dispatching POST /utenti
Tue, 21 Oct 2025 21:28:37 GMT express:router trim prefix (/api) from url /api/utenti
Tue, 21 Oct 2025 21:28:37 GMT express:router router /api : /api/utenti
Tue, 21 Oct 2025 21:28:37 GMT express:router dispatching POST /utenti
Tue, 21 Oct 2025 21:28:37 GMT express:router router  : /api/utenti
Tue, 21 Oct 2025 21:28:37 GMT express:router dispatching POST /api/utenti
Tue, 21 Oct 2025 21:28:37 GMT express:router router  : /api/utenti
Tue, 21 Oct 2025 21:28:37 GMT express:router dispatching POST /api/utenti
[DEV MOCK] ‚úÖ Creazione utente PIN 83 - Test User
POST /api/utenti 201 in 1ms :: {"success":true,"data":{"id":"mock-1761082117016‚Ä¶
Tue, 21 Oct 2025 21:29:19 GMT express:router dispatching GET /api/health
Tue, 21 Oct 2025 21:29:19 GMT express:router query  : /api/health
Tue, 21 Oct 2025 21:29:19 GMT express:router expressInit  : /api/health
Tue, 21 Oct 2025 21:29:19 GMT express:router jsonParser  : /api/health
Tue, 21 Oct 2025 21:29:19 GMT body-parser:json skip empty body
Tue, 21 Oct 2025 21:29:19 GMT express:router urlencodedParser  : /api/health
Tue, 21 Oct 2025 21:29:19 GMT body-parser:urlencoded skip empty body
Tue, 21 Oct 2025 21:29:19 GMT express:router requestIdMiddleware  : /api/health
Tue, 21 Oct 2025 21:29:19 GMT express:router readOnlyGuard  : /api/health
Tue, 21 Oct 2025 21:29:19 GMT express:router <anonymous>  : /api/health
[REQ] GET /api/health
Tue, 21 Oct 2025 21:29:19 GMT express:router <anonymous>  : /api/health
Tue, 21 Oct 2025 21:29:19 GMT express:router <anonymous>  : /api/health
Tue, 21 Oct 2025 21:29:19 GMT express:router trim prefix (/api) from url /api/health
Tue, 21 Oct 2025 21:29:19 GMT express:router router /api : /api/health
Tue, 21 Oct 2025 21:29:19 GMT express:router dispatching GET /health
GET /api/health 200 in 1ms :: {"ok":true,"status":"healthy","service":"BadgeNod‚Ä¶
